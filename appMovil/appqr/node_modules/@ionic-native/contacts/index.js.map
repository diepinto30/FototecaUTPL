{"version":3,"sources":["../../../src/@ionic-native/plugins/contacts/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CordovaInstance, InstanceProperty, Plugin, getPromise, InstanceCheck, checkAvailability, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\n\ndeclare const window: any,\n  navigator: any;\n\nexport type ContactFieldType = '*' | 'addresses' | 'birthday' | 'categories' | 'country' | 'department' | 'displayName' | 'emails' | 'familyName' | 'formatted' | 'givenName' | 'honorificPrefix' | 'honorificSuffix' | 'id' | 'ims' | 'locality' | 'middleName' | 'name' | 'nickname' | 'note' | 'organizations' | 'phoneNumbers' | 'photos' | 'postalCode' | 'region' | 'streetAddress' | 'title' | 'urls';\n\nexport interface IContactProperties {\n\n  /** A globally unique identifier. */\n  id?: string;\n\n  /** The name of this Contact, suitable for display to end users. */\n  displayName?: string;\n\n  /** An object containing all components of a persons name. */\n  name?: IContactName;\n\n  /** A casual name by which to address the contact. */\n  nickname?: string;\n\n  /** An array of all the contact's phone numbers. */\n  phoneNumbers?: IContactField[];\n\n  /** An array of all the contact's email addresses. */\n  emails?: IContactField[];\n\n  /** An array of all the contact's addresses. */\n  addresses?: IContactAddress[];\n\n  /** An array of all the contact's IM addresses. */\n  ims?: IContactField[];\n\n  /** An array of all the contact's organizations. */\n  organizations?: IContactOrganization[];\n\n  /** The birthday of the contact. */\n  birthday?: Date;\n\n  /** A note about the contact. */\n  note?: string;\n\n  /** An array of the contact's photos. */\n  photos?: IContactField[];\n\n  /** An array of all the user-defined categories associated with the contact. */\n  categories?: IContactField[];\n\n  /** An array of web pages associated with the contact. */\n  urls?: IContactField[];\n\n}\n\n/**\n * @hidden\n */\nexport class Contact implements IContactProperties {\n  private _objectInstance: any;\n  @InstanceProperty id: string;\n  @InstanceProperty displayName: string;\n  @InstanceProperty name: IContactName;\n  @InstanceProperty nickname: string;\n  @InstanceProperty phoneNumbers: IContactField[];\n  @InstanceProperty emails: IContactField[];\n  @InstanceProperty addresses: IContactAddress[];\n  @InstanceProperty ims: IContactField[];\n  @InstanceProperty organizations: IContactOrganization[];\n  @InstanceProperty birthday: Date;\n  @InstanceProperty note: string;\n  @InstanceProperty photos: IContactField[];\n  @InstanceProperty categories: IContactField[];\n  @InstanceProperty urls: IContactField[];\n\n  [key: string]: any;\n\n  constructor() {\n    if (checkAvailability('navigator.contacts', 'create', 'Contacts') === true) {\n      this._objectInstance = navigator.contacts.create();\n    }\n  }\n\n  @InstanceCheck()\n  clone(): Contact {\n    let newContact: any = new Contact();\n    for (let prop in this) {\n      if (prop === 'id') return;\n      newContact[prop] = this[prop];\n    }\n    return newContact;\n  }\n\n  @CordovaInstance()\n  remove(): Promise<any> { return; }\n\n  @InstanceCheck()\n  save(): Promise<any> {\n    return getPromise((resolve: Function, reject: Function) => {\n      this._objectInstance.save((contact: any) => {\n        this._objectInstance = contact;\n        resolve(this);\n      }, reject);\n    });\n  }\n}\n\n/**\n * @hidden\n */\nexport interface IContactError {\n  /** Error code */\n  code: number;\n  /** Error message */\n  message: string;\n}\n\n/**\n * @hidden\n */\nexport declare const ContactError: {\n  new (code: number): IContactError;\n  UNKNOWN_ERROR: number;\n  INVALID_ARGUMENT_ERROR: number;\n  TIMEOUT_ERROR: number;\n  PENDING_OPERATION_ERROR: number;\n  IO_ERROR: number;\n  NOT_SUPPORTED_ERROR: number;\n  PERMISSION_DENIED_ERROR: number\n};\n\nexport interface IContactName {\n  /** The complete name of the contact. */\n  formatted?: string;\n  /** The contact's family name. */\n  familyName?: string;\n  /** The contact's given name. */\n  givenName?: string;\n  /** The contact's middle name. */\n  middleName?: string;\n  /** The contact's prefix (example Mr. or Dr.) */\n  honorificPrefix?: string;\n  /** The contact's suffix (example Esq.). */\n  honorificSuffix?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactName implements IContactName {\n  constructor(public formatted?: string,\n    public familyName?: string,\n    public givenName?: string,\n    public middleName?: string,\n    public honorificPrefix?: string,\n    public honorificSuffix?: string) { }\n}\n\nexport interface IContactField {\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The value of the field, such as a phone number or email address. */\n  value?: string;\n  /** Set to true if this ContactField contains the user's preferred value. */\n  pref?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactField implements IContactField {\n  constructor(public type?: string,\n    public value?: string,\n    public pref?: boolean) { }\n}\n\nexport interface IContactAddress {\n  /** Set to true if this ContactAddress contains the user's preferred value. */\n  pref?: boolean;\n  /** A string indicating what type of field this is, home for example. */\n  type?: string;\n  /** The full address formatted for display. */\n  formatted?: string;\n  /** The full street address. */\n  streetAddress?: string;\n  /** The city or locality. */\n  locality?: string;\n  /** The state or region. */\n  region?: string;\n  /** The zip code or postal code. */\n  postalCode?: string;\n  /** The country name. */\n  country?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactAddress implements IContactAddress {\n  constructor(public pref?: boolean,\n    public type?: string,\n    public formatted?: string,\n    public streetAddress?: string,\n    public locality?: string,\n    public region?: string,\n    public postalCode?: string,\n    public country?: string) { }\n}\n\nexport interface IContactOrganization {\n  /** Set to true if this ContactOrganization contains the user's preferred value. */\n  pref?: boolean;\n  /** A string that indicates what type of field this is, home for example. */\n  type?: string;\n  /** The name of the organization. */\n  name?: string;\n  /** The department the contract works for. */\n  department?: string;\n  /** The contact's title at the organization. */\n  title?: string;\n}\n\n/**\n * @hidden\n */\nexport class ContactOrganization implements IContactOrganization {\n  constructor(\n    public type?: string,\n    public name?: string,\n    public department?: string,\n    public title?: string,\n    public pref?: boolean\n  ) { }\n}\n\n/** Search options to filter navigator.contacts.  */\nexport interface IContactFindOptions {\n  /** The search string used to find navigator.contacts. */\n  filter?: string;\n  /** Determines if the find operation returns multiple navigator.contacts. Defaults to false. */\n  multiple?: boolean;\n  /** Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. */\n  desiredFields?: string[];\n  /**\n   * (Android only): Filters the search to only return contacts with a phone number informed.\n   */\n  hasPhoneNumber?: boolean;\n}\n\n/**\n * @hidden\n */\nexport class ContactFindOptions implements IContactFindOptions {\n  constructor(public filter?: string,\n    public multiple?: boolean,\n    public desiredFields?: string[],\n    public hasPhoneNumber?: boolean) { }\n}\n\n/**\n * @name Contacts\n * @description\n * Access and manage Contacts on the device.\n *\n * @usage\n *\n * ```typescript\n * import { Contacts, Contact, ContactField, ContactName } from '@ionic-native/contacts';\n *\n * constructor(private contacts: Contacts) { }\n *\n * let contact: Contact = this.contacts.create();\n *\n * contact.name = new ContactName(null, 'Smith', 'John');\n * contact.phoneNumbers = [new ContactField('mobile', '6471234567')];\n * contact.save().then(\n *   () => console.log('Contact saved!', contact),\n *   (error: any) => console.error('Error saving contact.', error)\n * );\n *\n * ```\n * @classes\n * Contact\n * @interfaces\n * IContactProperties\n * IContactError\n * IContactName\n * IContactField\n * IContactAddress\n * IContactOrganization\n * IContactFindOptions\n */\n@Plugin({\n  pluginName: 'Contacts',\n  plugin: 'cordova-plugin-contacts',\n  pluginRef: 'navigator.contacts',\n  repo: 'https://github.com/apache/cordova-plugin-contacts',\n  platforms: ['Android', 'BlackBerry 10', 'Firefox OS', 'iOS', 'Ubuntu', 'Windows', 'Windows Phone 8']\n})\n\nexport class Contacts extends IonicNativePlugin {\n\n  /**\n   * Create a single contact.\n   * @returns {Contact} Returns a Contact object\n   */\n  create(): Contact {\n    return new Contact();\n  }\n\n  /**\n   * Search for contacts in the Contacts list.\n   * @param fields {ContactFieldType[]}  Contact fields to be used as a search qualifier\n   * @param options {IContactFindOptions} Optional options for the query\n   * @returns {Promise<Contact[]>} Returns a Promise that resolves with the search results (an array of Contact objects)\n   */\n  @CordovaCheck()\n  find(fields: ContactFieldType[], options?: IContactFindOptions): Promise<Contact[]> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.find(fields, (contacts: any[]) => {\n        resolve(contacts.map(processContact));\n      }, reject, options);\n    });\n  }\n\n  /**\n   * Select a single Contact.\n   * @returns {Promise<Contact>} Returns a Promise that resolves with the selected Contact\n   */\n  @CordovaCheck()\n  pickContact(): Promise<Contact> {\n    return getPromise((resolve: Function, reject: Function) => {\n      navigator.contacts.pickContact((contact: any) => resolve(processContact(contact)), reject);\n    });\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * @hidden\n */\nfunction processContact(contact: any) {\n  let newContact = new Contact();\n  for (let prop in contact) {\n    if (typeof contact[prop] === 'function') continue;\n    newContact[prop] = contact[prop];\n  }\n  return newContact;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}