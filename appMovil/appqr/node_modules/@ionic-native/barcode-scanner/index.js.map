{"version":3,"sources":["../../../src/@ionic-native/plugins/barcode-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA8DxE;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AASH,IAAa,cAAc;IAAS,kCAAiB;IARrD;QAAA,qEAgDC;QAtCC,YAAM,GAKF;YACF,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE,YAAY;YACxB,UAAU,EAAE,YAAY;YACxB,QAAQ,EAAE,UAAU;SACrB,CAAC;;IA4BJ,CAAC;IA1BC;;;;OAIG;IAIH,6BAAI,GAAJ,UAAK,OAA+B,IAAgC,MAAM,CAAC,CAAC,CAAC;IAE7E;;;;;;OAMG;IAEH,+BAAM,GAAN,UAAO,IAAY,EAAE,IAAS,IAAkB,MAAM,CAAC,CAAC,CAAC;IAQ3D,qBAAC;AAAD,CAxCA,AAwCC,CAxCmC,iBAAiB,GAwCpD;AANM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAjBA;IAHC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;KACzB,CAAC;;;;0CAC2E;AAU7E;IADC,OAAO,EAAE;;;;4CAC+C;AAhC9C,cAAc;IAR1B,MAAM,CAAC;QACN,UAAU,EAAE,gBAAgB;QAC5B,MAAM,EAAE,gCAAgC;QACxC,SAAS,EAAE,gCAAgC;QAC3C,IAAI,EAAE,4DAA4D;QAClE,SAAS,EAAE,CAAC,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACrE,CAAC;GAEW,cAAc,CAwC1B;SAxCY,cAAc","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface BarcodeScannerOptions {\n\n  /**\n   * Prefer front camera. Supported on iOS and Android.\n   */\n  preferFrontCamera?: boolean;\n\n  /**\n   * Show flip camera button. Supported on iOS and Android.\n   */\n  showFlipCameraButton?: boolean;\n\n  /**\n   * Show torch button. Supported on iOS and Android.\n   */\n  showTorchButton?: boolean;\n\n  /**\n   * Disable animations. Supported on iOS only.\n   */\n  disableAnimations?: boolean;\n\n  /**\n   * Disable success beep. Supported on iOS only.\n   */\n  disableSuccessBeep?: boolean;\n\n  /**\n   * Prompt text. Supported on Android only.\n   */\n  prompt?: string;\n\n  /**\n   * Formats separated by commas. Defaults to all formats except `PDF_417` and `RSS_EXPANDED`.\n   */\n  formats?: string;\n\n  /**\n   * Orientation. Supported on Android only. Can be set to `portrait` or `landscape`. Defaults to none so the user can rotate the phone and pick an orientation.\n   */\n  orientation?: string;\n\n  /**\n   * Launch with the torch switched on (if available). Supported on Android only.\n   */\n  torchOn?: boolean;\n\n  /**\n   * Display scanned text for X ms. 0 suppresses it entirely, default 1500. Supported on Android only.\n   */\n  resultDisplayDuration?: number;\n\n}\n\nexport interface BarcodeScanResult {\n  format: 'QR_CODE' | 'DATA_MATRIX' | 'UPC_E' | 'UPC_A' | 'EAN_8' | 'EAN_13' | 'CODE_128' | 'CODE_39' | 'CODE_93' | 'CODABAR' | 'ITF' | 'RSS14' | 'RSS_EXPANDED' | 'PDF417' | 'AZTEC' | 'MSI';\n  cancelled: boolean;\n  text: string;\n}\n\n/**\n * @name Barcode Scanner\n * @description\n * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.\n *\n * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).\n *\n * @usage\n * ```typescript\n * import { BarcodeScanner } from '@ionic-native/barcode-scanner';\n *\n * constructor(private barcodeScanner: BarcodeScanner) { }\n *\n * ...\n *\n *\n * this.barcodeScanner.scan().then((barcodeData) => {\n *  // Success! Barcode data is here\n * }, (err) => {\n * \t// An error occurred\n * });\n * ```\n * @interfaces\n * BarcodeScannerOptions\n * BarcodeScanResult\n */\n@Plugin({\n  pluginName: 'BarcodeScanner',\n  plugin: 'phonegap-plugin-barcodescanner',\n  pluginRef: 'cordova.plugins.barcodeScanner',\n  repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',\n  platforms: ['Android', 'BlackBerry 10', 'Browser', 'iOS', 'Windows']\n})\n\nexport class BarcodeScanner extends IonicNativePlugin {\n\n  Encode: {\n    TEXT_TYPE: string;\n    EMAIL_TYPE: string;\n    PHONE_TYPE: string;\n    SMS_TYPE: string;\n  } = {\n    TEXT_TYPE: 'TEXT_TYPE',\n    EMAIL_TYPE: 'EMAIL_TYPE',\n    PHONE_TYPE: 'PHONE_TYPE',\n    SMS_TYPE: 'SMS_TYPE'\n  };\n\n  /**\n   * Open the barcode scanner.\n   * @param options {BarcodeScannerOptions} Optional options to pass to the scanner\n   * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  scan(options?: BarcodeScannerOptions): Promise<BarcodeScanResult> { return; }\n\n  /**\n   * Encodes data into a barcode.\n   * NOTE: not well supported on Android\n   * @param type {string} Type of encoding\n   * @param data {any} Data to encode\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  encode(type: string, data: any): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}